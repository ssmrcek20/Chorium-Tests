using Emgu.CV;
using Emgu.CV.Face;
using Emgu.CV.Structure;
using FakeItEasy;
using SlojEntiteta.Entiteti;
using SlojPoslovneLogike.Servisi;
using SlojUpravljanjaSBazomPodataka.repozitoriji;
using SlojUpravljanjaSBazomPodataka.Sucelja;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace JedinicnoTestiranje
{
    public class KorisnikServis_Tests
    {
        [Fact]
        public void RegistrirajKorisnika_GivenKorisnikPostoji_ReturnsFlase()
        {
            Korisnik korisnik = new Korisnik
            {
                Ime = "test",
                Prezime = "test",
                Email = "test.test@gmail.com",
                Korisnicko_ime = "test",
                Lozinka = "test",
                ID_tip_korisnika = 1,
                Datum_rodenja = new DateTime(1990, 1, 1)
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            A.CallTo(() => fakeRepo.ProvjeriKorisnikoIme(korisnik.Korisnicko_ime)).Returns(true);
            A.CallTo(() => fakeRepo.Dodaj(korisnik)).Returns(0);
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            bool korisnikRegistriran = korisnikServis.RegistrirajKorisnika(korisnik);

            Assert.False(korisnikRegistriran);
        }

        [Fact]
        public void RegistrirajKorisnika_GivenKorisnikNePostoji_ReturnsTrue()
        {
            Korisnik korisnik = new Korisnik
            {
                Ime = "test",
                Prezime = "test",
                Email = "test.test@gmail.com",
                Korisnicko_ime = "test",
                Lozinka = "test",
                ID_tip_korisnika = 1,
                Datum_rodenja = new DateTime(1990, 1, 1)
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            A.CallTo(() => fakeRepo.ProvjeriKorisnikoIme(korisnik.Korisnicko_ime)).Returns(false);
            A.CallTo(() => fakeRepo.Dodaj(korisnik)).Returns(1);
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            bool korisnikRegistriran = korisnikServis.RegistrirajKorisnika(korisnik);

            Assert.True(korisnikRegistriran);
        }

        [Fact]
        public void DohvatiTrenutnogKorisnika_GivenKorisnikIsNotLoggedIn_ReturnsNull()
        {
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            Korisnik korisnik = korisnikServis.DohvatiTrenutnogKorisnika();

            Assert.Null(korisnik);
        }
        [Fact]
        public void DohvatiTrenutnogKorisnika_GivenKorisnikIsLoggedIn_ReturnsKorisnikObject()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka"
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            A.CallTo(() => fakeRepo.DohvatiKorisnika(korisnik.Korisnicko_ime)).Returns(korisnik);
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            korisnikServis.ProvjeriIspravnostPodataka(korisnik.Korisnicko_ime, korisnik.Lozinka);

            var prijavljeniKorisnik = korisnikServis.DohvatiTrenutnogKorisnika();

            Assert.Equal(korisnik.ID, prijavljeniKorisnik.ID);
        }

        [Fact]
        public void ProvjeriIspravnostPodataka_GivenValidCredentials_ReturnsTrue()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka"
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            A.CallTo(() => fakeRepo.DohvatiKorisnika(korisnik.Korisnicko_ime)).Returns(korisnik);
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            bool provjera = korisnikServis.ProvjeriIspravnostPodataka(korisnik.Korisnicko_ime, korisnik.Lozinka);

            Assert.True(provjera);
        }

        [Fact]
        public void ProvjeriIspravnostPodataka_GivenInvalidCredentials_ReturnsFalse()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "krivalozinka"
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            A.CallTo(() => fakeRepo.DohvatiKorisnika(korisnik.Korisnicko_ime)).Returns(null);
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            bool provjera = korisnikServis.ProvjeriIspravnostPodataka(korisnik.Korisnicko_ime, korisnik.Lozinka);

            Assert.False(provjera);
        }

        [Fact]
        public void ProvjeriKorisnika_GivenUserIsParent_ReturnsTrue()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 1
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            A.CallTo(() => fakeRepo.DohvatiKorisnika(korisnik.Korisnicko_ime)).Returns(korisnik);
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            korisnikServis.ProvjeriIspravnostPodataka(korisnik.Korisnicko_ime, korisnik.Lozinka);

            bool provjera = korisnikServis.ProvjeriKorisnika();

            Assert.True(provjera);
        }

        [Fact]
        public void ProvjeriKorisnika_GivenUserIsNotParent_ReturnsFalse()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 0
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            A.CallTo(() => fakeRepo.DohvatiKorisnika(korisnik.Korisnicko_ime)).Returns(korisnik);
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            korisnikServis.ProvjeriIspravnostPodataka(korisnik.Korisnicko_ime, korisnik.Lozinka);

            bool provjera = korisnikServis.ProvjeriKorisnika();

            Assert.False(provjera);
        }

        [Fact]
        public void ProvjeriDobneGranice_GivenUsersMeetTheRequirements_ReturnsTrue()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2001-08-03 00:00:00.000")
            };
            Kategorija kategorija = new Kategorija
            {
                Dobna_granica = 5
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            bool provjera = korisnikServis.ProvjeriDobneGranice(new List<Korisnik> { korisnik}, kategorija);

            Assert.True(provjera);
        }

        [Fact]
        public void ProvjeriDobneGranice_GivenUsersDontMeetTheRequirements_ReturnsFalse()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2001-08-03 00:00:00.000")
            };
            Korisnik korisnik2 = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "asaaa",
                Lozinka = "dsfdssdfdfs",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2020-08-03 00:00:00.000")
            };
            Kategorija kategorija = new Kategorija
            {
                Dobna_granica = 5
            };
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            bool provjera = korisnikServis.ProvjeriDobneGranice(new List<Korisnik> { korisnik, korisnik2 }, kategorija);

            Assert.False(provjera);
        }

        [Fact]
        public void SkenirajLice_GivenDirectorySlikeDontExists_FilesLenghtIsOne()
        {
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            string putanja = Directory.GetCurrentDirectory() + @"\slike";
            Directory.CreateDirectory(putanja);
            Directory.Delete(putanja, true);

            korisnikServis.SkenirajLice();
            string[] files = Directory.GetFiles(putanja, "*.jpg", SearchOption.AllDirectories);

            Assert.Single(files);
        }
        [Fact]
        public void SkenirajLice_GivenDirectorySlikeExists_FilesLenghtIsOne()
        {
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            string putanja = Directory.GetCurrentDirectory() + @"\slike";
            Directory.CreateDirectory(putanja);

            korisnikServis.SkenirajLice();
            string[] files = Directory.GetFiles(putanja, "*.jpg", SearchOption.AllDirectories);

            Assert.Single(files);
        }

        [Fact]
        public void StvoriFaceRecognizer_GivenNoImages_ReturnsNULL()
        {
            var slike = new List<Image<Gray, byte>>();
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);

            var eigenFaceRecognizer = korisnikServis.StvoriFaceRecognizer(slike);

            Assert.Null(eigenFaceRecognizer);
        }

        [Fact]
        public void StvoriFaceRecognizer_GivenImages_ReturnsEigenFaceRecognizer()
        {
            var slike = new List<Image<Gray, byte>>();
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            int width = 200;
            int height = 200;
            Bitmap bitmap = new Bitmap(width, height);
            Image<Gray, Byte> emguImage = new Image<Gray, Byte>(bitmap);
            slike.Add(emguImage);
            var eigenFaceRecognizer = korisnikServis.StvoriFaceRecognizer(slike);
            Assert.True(eigenFaceRecognizer.GetType() == new EigenFaceRecognizer().GetType());

        }

        [Fact]
        public void popuniPopisSlika_GivenUsers_ReturnsImages()
        {
            string varbinaryValue = "
            byte[] byteArray = new byte[(varbinaryValue.Length - 2) / 2];
            for (int i = 0; i < byteArray.Length; i++)
            {
                byteArray[i] = Convert.ToByte(varbinaryValue.Substring(i * 2 + 2, 2), 16);
            }
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2001-08-03 00:00:00.000"),
                Lice = byteArray,
                Lice2 = byteArray,
                Lice3 = byteArray,
                Lice4 = byteArray,
                Lice5 = byteArray,
            };
            Korisnik korisnik2 = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "asaaa",
                Lozinka = "dsfdssdfdfs",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2020-08-03 00:00:00.000"),
                Lice = byteArray,
                Lice2 = byteArray,
                Lice3 = byteArray,
                Lice4 = byteArray,
                Lice5 = byteArray
            };

            var popisKorisnika = new List<Korisnik>();
            popisKorisnika.Add(korisnik);
            popisKorisnika.Add(korisnik2);

            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            List<Image<Gray, Byte>> slike = korisnikServis.popuniPopisSlika(popisKorisnika);

            Assert.Equal(10, slike.Count);
        }

        [Fact]
        public void popuniPopisSlika_GivenEmptyUsersList_ReturnsEmptyList()
        {
            var popisKorisnika = new List<Korisnik>();
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            List<Image<Gray, Byte>> slike = korisnikServis.popuniPopisSlika(popisKorisnika);

            Assert.True(slike.Count == 0);
        }

        [Fact]
        public void popuniPopisSlika_GivenUsersWithoutImage_ReturnsEmptyList()
        {
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2001-08-03 00:00:00.000")
            };
            Korisnik korisnik2 = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "asaaa",
                Lozinka = "dsfdssdfdfs",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2020-08-03 00:00:00.000")
            };

            var popisKorisnika = new List<Korisnik>();
            popisKorisnika.Add(korisnik);
            popisKorisnika.Add(korisnik2);

            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            List<Image<Gray, Byte>> slike = korisnikServis.popuniPopisSlika(popisKorisnika);

            Assert.True(slike.Count==0);

        }
        [Fact]
        public void popuniPopisKorisnikaSaSlikama_GivenUsersList_ReturnsListOfUsers()
        {
            string varbinaryValue = "
            byte[] byteArray = new byte[(varbinaryValue.Length - 2) / 2];
            for (int i = 0; i < byteArray.Length; i++)
            {
                byteArray[i] = Convert.ToByte(varbinaryValue.Substring(i * 2 + 2, 2), 16);
            }
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2001-08-03 00:00:00.000"),
                Lice = byteArray,
                Lice2 = byteArray,
                Lice3 = byteArray,
                Lice4 = byteArray,
                Lice5 = byteArray,
            };
            Korisnik korisnik2 = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "asaaa",
                Lozinka = "dsfdssdfdfs",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2020-08-03 00:00:00.000"),
                Lice = byteArray,
                Lice2 = byteArray,
                Lice3 = byteArray,
                Lice4 = byteArray,
                Lice5 = byteArray
            };

            var popisKorisnika = new List<Korisnik>();
            popisKorisnika.Add(korisnik);
            popisKorisnika.Add(korisnik2);

            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            List<Korisnik> korisnici = korisnikServis.popuniPopisKorisnikaSaSlikama(popisKorisnika);

            Assert.Equal(2, korisnici.Count());
        }

        [Fact]
        public void popuniPopisKorisnikaSaSlikama_GivenEmptyUsersList_ReturnsEmptyListOfUsers()
        {

            var popisKorisnika = new List<Korisnik>();
            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            List<Korisnik> korisnici = korisnikServis.popuniPopisKorisnikaSaSlikama(popisKorisnika);

            Assert.Equal(0, korisnici.Count());
        }

        [Fact]
        public void popuniPopisKorisnikaSaSlikama_GivenUsersListWithoutImage_ReturnsEmptyListOfUsers()
        {
            string varbinaryValue = "
            byte[] byteArray = new byte[(varbinaryValue.Length - 2) / 2];
            for (int i = 0; i < byteArray.Length; i++)
            {
                byteArray[i] = Convert.ToByte(varbinaryValue.Substring(i * 2 + 2, 2), 16);
            }
            Korisnik korisnik = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "franjo",
                Lozinka = "franjolozinka",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2001-08-03 00:00:00.000"),
                Lice = byteArray,
                Lice2 = byteArray,
                Lice3 = byteArray,
                Lice4 = byteArray,
                Lice5 = byteArray,
            };
            Korisnik korisnik2 = new Korisnik
            {
                ID = 12345,
                Korisnicko_ime = "asaaa",
                Lozinka = "dsfdssdfdfs",
                ID_tip_korisnika = 0,
                Datum_rodenja = DateTime.Parse("2020-08-03 00:00:00.000")
            };

            var popisKorisnika = new List<Korisnik>();
            popisKorisnika.Add(korisnik);
            popisKorisnika.Add(korisnik2);

            var fakeRepo = A.Fake<IKorisnikRepozitorij>();
            KorisnikServis korisnikServis = new KorisnikServis(fakeRepo);
            List<Korisnik> korisnici = korisnikServis.popuniPopisKorisnikaSaSlikama(popisKorisnika);

            Assert.Equal(1, korisnici.Count());
        }

    }
}
